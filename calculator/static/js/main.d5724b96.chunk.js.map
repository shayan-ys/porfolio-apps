{"version":3,"sources":["logo.svg","components/Keypad.tsx","components/KeypadsLayout.tsx","components/Calculator.tsx","containers/CalculatorBox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","root","width","height","fontSize","number","operator","backgroundColor","Keypad","props","classes","classKeyType","indexOf","value","react_default","a","createElement","ButtonBase","className","join","theme","marginTop","spacing","overflowX","table","tableBody","borderRadius","row","cell","border","input","padding","flex","KeypadCell","colSpan","TableCell","Keypad_Keypad","KeypadsLayout","Table","TableBody","TableRow","InputBase","autoFocus","placeholder","KeypadsLayout_KeypadCell","Calculator","Container","maxWidth","Box","boxShadow","KeypadsLayout_KeypadsLayout","CalculatorBox","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculate","bind","assertThisInitialized","inherits","createClass","key","first","state","clipboard","second","currentVal","result","currentOp","setState","Calculator_Calculator","React","Component","App","Grid","container","direction","justify","alignItems","item","src","logo","alt","CalculatorBox_CalculatorBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5724b96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\n\ninterface Props {\n    value: string;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        height: 60,\n        fontSize: 23\n    },\n    number: {},\n    operator: {\n        backgroundColor: 'orange'\n    }\n});\n\nexport const Keypad = (props: Props) => {\n    const classes = useStyles();\n    let operators = [\"=\", \"+\", \"−\", \"×\", \"÷\"];\n    let classKeyType = classes.number;\n    if (operators.indexOf(props.value) > -1) {\n        classKeyType = classes.operator;\n    }\n    return (\n        <ButtonBase className={[classes.root, classKeyType].join(\" \")}>{props.value}</ButtonBase>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport InputBase from '@material-ui/core/InputBase';\nimport { Keypad } from './Keypad';\n\ninterface CellProps {\n    value: string;\n}\ninterface Props {}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n    },\n    table: {},\n    tableBody: {\n        borderRadius: 50,\n    },\n    row: {},\n    cell: {\n        width: '25%',\n        border: '1px solid #ddd'\n    },\n    input: {\n        padding: 10,\n        flex: 1,\n        width: '100%',\n        fontSize: 47\n    }\n}));\n\nexport const KeypadCell = (props: CellProps) =>\n{\n    const classes = useStyles();\n    let colSpan = 1;\n    if (props.value == \".\") {\n        colSpan = 2;\n    }\n    return (\n        <TableCell className={classes.cell} colSpan={colSpan}><Keypad value={props.value} /></TableCell>\n    );\n}\n\nexport const KeypadsLayout = (props: Props) =>\n{\n    const classes = useStyles();\n    return (\n        <Table className={classes.table} padding=\"none\">\n            <TableBody className={classes.tableBody}>\n                <TableRow>\n                    <TableCell className={classes.cell} colSpan={4}>\n                        <InputBase autoFocus className={classes.input} placeholder=\"0\" />\n                    </TableCell>\n                </TableRow>\n                <TableRow>\n                    <KeypadCell value=\"AC\" />\n                    <KeypadCell value=\"+/-\" />\n                    <KeypadCell value=\"%\" />\n                    <KeypadCell value=\"÷\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell value=\"7\" />\n                    <KeypadCell value=\"8\" />\n                    <KeypadCell value=\"9\" />\n                    <KeypadCell value=\"×\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell value=\"4\" />\n                    <KeypadCell value=\"5\" />\n                    <KeypadCell value=\"6\" />\n                    <KeypadCell value=\"−\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell value=\"1\" />\n                    <KeypadCell value=\"2\" />\n                    <KeypadCell value=\"3\" />\n                    <KeypadCell value=\"+\" />\n                </TableRow>\n                <TableRow>\n                    <KeypadCell value=\"0\" />\n                    <KeypadCell value=\".\" />\n                    <KeypadCell value=\"=\" />\n                </TableRow>\n            </TableBody>\n        </Table>\n    );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\n\nimport { KeypadsLayout } from './KeypadsLayout';\n\ninterface Props {}\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: 35\n    },\n});\n\nexport const Calculator = (props: Props) => \n{\n    const classes = useStyles();\n    return (\n        <Container className={classes.root} maxWidth=\"xs\">\n            <Box boxShadow=\"1\">\n            <KeypadsLayout />\n            </Box>\n        </Container>\n    );\n}\n","import React from 'react';\nimport { Calculator } from '../components/Calculator';\n\ninterface Props {}\ninterface State {\n    clipboard: number;\n    currentVal: number;\n    currentOp: \"+\" | \"-\" | null;\n}\n\nexport class CalculatorBox extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.calculate = this.calculate.bind(this);\n    }\n\n    calculate() {\n        let first = this.state.clipboard;\n        let second = this.state.currentVal;\n        let result = 0;\n\n        switch(this.state.currentOp) {\n            case \"+\":\n                result = first + second; break;\n            case \"-\":\n                result = first - second; break;\n            default:\n                result = first;\n        }\n\n        this.setState({\n            clipboard: result,\n            currentVal: 0,\n            currentOp: null\n        });\n    }\n\n    render() {\n        return <Calculator />;\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Grid } from '@material-ui/core';\n\nimport { CalculatorBox } from './containers/CalculatorBox';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n          <Grid item className=\"App-logo-container\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </Grid>\n          <Grid item className=\"App-header-container\">\n            <b>ReactJS</b>\n          </Grid>\n        </Grid>\n      </header>\n      <div>\n        <CalculatorBox />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}